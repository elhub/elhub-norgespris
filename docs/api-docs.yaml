openapi: 3.1.1
info:
  title: Contracts JSON:API
  description: |
    API for managing contract information in the Elhub system.
    Contracts represent agreements on metering points in the Elhub system and is used to represent a variety of different relationships
    that can exist on a metering point. Norgespris is a type of contract in the Elhub information model. Set the server URL to match your environment.
  version: 0.0.1
  contact:
    name: team-wow
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/v1
    description: Local test server
  - url: https://market-processes-contracts-service-{environment}.elhub.cloud/v1
    description: Test server
    variables:
      environment:
        default: test13
        enum:
          - test9
          - test11
          - test13
security:
  - bearerAuth: []
paths:
  /contracts:
    get:
      summary: Get all contracts
      description: |
        Get all contracts which you (as a market party or end user) are entitled to view.
        In almost all cases, this means you must have a valid contract on the metering point in order to retrieve information about it.
      operationId: getContracts
      parameters:
        - name: filter[contractType]
          in: query
          description: Filter by contract type. This is used to retrieve all records of a specific type; e.g., all contracts of type Norgespris.
          required: false
          schema:
            type: string
            enum:
              - Norgespris
              - BalanceSupplyContract
              - GridAccessContract
              - ThirdPartyAccessContract
        - name: filter[meteringPointId]
          in: query
          description: Filter list by metering point IDs. This is used to retrieve records based on the metering point ID.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: filter[updatedAt][gt]
          in: query
          description: Filter contracts updated after this timestamp (RFC 3339)
          required: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt][lt]
          in: query
          description: Filter contracts updated before this timestamp (RFC 3339)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully get contracts
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a contract
      description: Create one or more contracts linked to meteringPointId(s).
      operationId: createContracts
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
            example:
              data:
                - type: contract
                  attributes:
                    contractType: Norgespris
                    status: Activated
                    validFrom: '2026-01-01'
                    validTo: '2026-12-31'
                  relationships:
                    createdBy:
                      data:
                        type: Party
                        id: GLN1234567890123
                    meteringPoint:
                      data:
                        type: MeteringPoint
                        id: MP123456789
      responses:
        '201':
          description: Successfully created contract
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update contracts
      description: Update a set of contracts.
      operationId: updateContracts
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
            example:
              data:
                - type: contract
                  attributes:
                    contractType: Norgespris
                    status: Activated
                    validFrom: '2026-01-01'
                    validTo: '2026-12-31'
                  relationships:
                    createdBy:
                      data:
                        type: Party
                        id: GLN1234567890123
                    meteringPoint:
                      data:
                        type: MeteringPoint
                        id: MP123456789
      responses:
        '200':
          description: Successfully updated contract
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
  /contracts/{contractId}:
    get:
      summary: Get a single contract by ID
      description: Get a single contract entity identified by ID.
      operationId: getContractById
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully get contract by ID
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a contract by ID
      description: Update a contract entity identified by ID.
      operationId: patchContractById
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
      responses:
        '200':
          description: Successfully updated contract
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
  /contracts/{contractId}/status:
    get:
      summary: Get contract status history
      description: Get the status history for a specific contract, ordered by creation date (most recent first).
      operationId: getContractStatusHistory
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract for which the status history will be retrieved.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract status history
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ContractStatusResponse'
        '400':
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Contract not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ContractResponse:
      allOf:
        - $ref: '#/components/schemas/response'
    ContractRequest:
      allOf:
        - $ref: '#/components/schemas/definitions-request'
    Contract:
      allOf:
        - $ref: '#/components/schemas/contract'
    ContractAttributes:
      allOf:
        - $ref: '#/components/schemas/attributes'
    ContractStatusResponse:
      allOf:
        - $ref: '#/components/schemas/definitions-response'
    ContractStatus:
      allOf:
        - $ref: '#/components/schemas/contract-status'
    ContractStatusAttributes:
      allOf:
        - $ref: '#/components/schemas/definitions-attributes'
    ContractStatusRelationships:
      allOf:
        - $ref: '#/components/schemas/definitions-relationships'
    Meta:
      allOf:
        - $ref: '#/components/schemas/meta'
    Error:
      allOf:
        - $ref: '#/components/schemas/error'
    Relationships:
      allOf:
        - $ref: '#/components/schemas/relationships'
    contractType:
      description: The type of the contract.
      type: string
      enum:
        - Norgespris
      examples:
        - Norgespris
    status:
      description: The status of the contract.
      type: string
      enum:
        - Initiated
        - Cancelled
        - Activated
        - Expired
      examples:
        - Initiated
    startDate:
      description: The start date of the contract's validity period.
      type:
        - string
      format: date
      examples:
        - '2025-10-01'
    endDate:
      description: The end date of the contract's validity period.
      type:
        - string
      format: date
      examples:
        - '2026-12-31'
    attributes:
      type: object
      properties:
        contractType:
          $ref: '#/components/schemas/contractType'
        status:
          $ref: '#/components/schemas/status'
        validFrom:
          $ref: '#/components/schemas/startDate'
        validTo:
          $ref: '#/components/schemas/endDate'
      required:
        - contractType
      additionalProperties: false
    relation:
      type: object
      properties:
        links:
          type: object
          description: Links related to the relation.
        data:
          type:
            - object
            - 'null'
          properties:
            type:
              description: The type of the related resource.
              type: string
              enum:
                - Party
                - MeteringPoint
            id:
              description: The identifier of the related resource.
              type: string
              examples:
                - GLN
                - MP123
          required:
            - type
            - id
          additionalProperties: false
        meta:
          type: object
          description: Meta information about the relation.
      oneOf:
        - required:
            - links
        - required:
            - data
        - required:
            - meta
      additionalProperties: false
    relationships:
      type:
        - object
        - 'null'
      properties:
        createdBy:
          $ref: '#/components/schemas/relation'
        meteringPoint:
          $ref: '#/components/schemas/relation'
      required:
        - createdBy
        - meteringPoint
      additionalProperties: false
    createdAt:
      description: The creation timestamp of the resource.
      type: string
      format: date-time
      examples:
        - '2026-01-01T00:00:00Z'
    updatedAt:
      description: The last update timestamp of the resource.
      type: string
      format: date-time
      examples:
        - '2026-01-01T00:00:00Z'
    meta:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - createdAt
        - updatedAt
      additionalProperties: false
    contract:
      type: object
      properties:
        type:
          description: The type of the resource.
          type: string
          enum:
            - contract
          examples:
            - contract
        id:
          description: The unique identifier of the contract.
          type: string
          format: uuid
          examples:
            - 4ef727d1-b672-4166-a973-aa6e412b09bb
        attributes:
          $ref: '#/components/schemas/attributes'
        relationships:
          $ref: '#/components/schemas/relationships'
        meta:
          $ref: '#/components/schemas/meta'
      required:
        - type
        - id
        - attributes
      additionalProperties: false
    topLevelLinks:
      description: Links related to the primary data or error response, as defined by JSON:API.
      type: object
      properties:
        self:
          description: A link to the resource itself.
          type: string
          format: uri
          examples:
            - https://test.elhub.no/v1/contracts/4ef727d1-b672-4166-a973-aa6e412b09bb
      additionalProperties: false
    response:
      title: Contract Response
      description: Schema for a contract response in the Contracts JSON:API, compliant with JSON:API v1.1.
      type: object
      properties:
        data:
          description: The primary data, either a single contract or an array of contracts.
          type: array
          items:
            $ref: '#/components/schemas/contract'
          uniqueItems: true
        meta:
          $ref: '#/components/schemas/meta'
        links:
          description: Links related to the contract response.
          $ref: '#/components/schemas/topLevelLinks'
      required:
        - data
      additionalProperties: false
    error:
      type: object
      properties:
        status:
          description: The HTTP status code applicable to this problem, expressed as a string value.
          type: string
          examples:
            - '400'
            - '404'
            - '500'
        title:
          description: A short, human-readable summary of the problem.
          type: string
          examples:
            - Bad Request
            - Contract Not Found
            - Internal Server Error
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          examples:
            - When the request is invalid
            - Failed to get contract with contractId '4ef727d1-b672-4166-a973-aa6e412b09bb'
            - An unexpected error occurred
      required:
        - status
        - title
        - detail
      additionalProperties: false
    request:
      type: object
      properties:
        type:
          description: The type of the resource.
          type: string
          enum:
            - contract
          examples:
            - contract
        attributes:
          $ref: '#/components/schemas/attributes'
        relationships:
          $ref: '#/components/schemas/relationships'
      required:
        - type
        - attributes
        - relationships
      additionalProperties: false
    definitions-request:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/request'
      required:
        - data
      additionalProperties: false
    type:
      description: The type of the resource.
      type: string
      enum:
        - contract-status
    id:
      description: The unique identifier of the contract status.
      type: string
      format: uuid
      examples:
        - 123e4567-e89b-12d3-a456-426614174000
    properties-status:
      description: The status of the contract.
      type: string
      enum:
        - Initiated
        - Cancelled
        - Activated
        - Expired
      examples:
        - Activated
    createdBy:
      description: The identifier of who created this status entry.
      type: string
      examples:
        - GLN1234567890123
    properties-createdAt:
      description: When this status was created (RFC 3339).
      type: string
      format: date-time
      examples:
        - '2025-06-16T10:30:00Z'
    definitions-attributes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/properties-status'
        createdBy:
          $ref: '#/components/schemas/createdBy'
        createdAt:
          $ref: '#/components/schemas/properties-createdAt'
      required:
        - status
        - createdBy
        - createdAt
      additionalProperties: false
    properties-contract:
      description: The contract this status belongs to.
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum:
                - Contract
            id:
              type: string
              format: uuid
              examples:
                - 123e4567-e89b-12d3-a456-426614174000
          required:
            - type
            - id
          additionalProperties: false
      required:
        - data
      additionalProperties: false
    definitions-relationships:
      type: object
      properties:
        contract:
          $ref: '#/components/schemas/properties-contract'
      required:
        - contract
      additionalProperties: false
    contract-status:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        attributes:
          $ref: '#/components/schemas/definitions-attributes'
        relationships:
          $ref: '#/components/schemas/definitions-relationships'
      required:
        - type
        - attributes
        - relationships
      additionalProperties: false
    data:
      description: Array of contract status entries.
      type: array
      items:
        $ref: '#/components/schemas/contract-status'
    definitions-response:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/data'
        meta:
          $ref: '#/components/schemas/meta'
      required:
        - data
      additionalProperties: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
