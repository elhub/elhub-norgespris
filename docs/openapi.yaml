openapi: 3.1.1
info:
  title: Contracts JSON:API
  description: >
    API for managing contract information in the Elhub system.
    Contracts represent agreements on metering points in the Elhub system and is used to represent a variety of different relationships
    that can exist on a metering point. Norgespris is a type of contract in the Elhub information model.
  version: 0.0.1
  x-date: 2025-05-16
  x-status: Development
  contact:
    name: team-wow
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
security:
  - bearerAuth: []
servers:
  - url: https://test.elhub.no/v1/contracts
    description: Test server
paths:
  /contracts:
    get:
      summary: Get all contracts
      description: >
        Get all contracts which you (as a market party or end user) are entitled to view.
        In almost all cases, this means you must have a valid contract on the metering point in order to retrieve information about it.
      operationId: getContracts
      parameters:
        - name: filter[contractType]
          in: query
          description: Filter by contract type. This is used to retrieve all records of a specific type; e.g., all contracts of type  Norgespris.
          required: false
          schema:
            type: string
            enum: [NorgesprisContract, BalanceSupplyContract, GridAccessContract, ThirdPartyAccessContract]
        - name: filter[updatedAt][gt]
          in: query
          description: Filter contracts updated after this timestamp (RFC 3339)
          required: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt][lt]
          in: query
          description: Filter contracts updated before this timestamp (RFC 3339)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successfully get contracts
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a contract
      description: Create one or more contracts linked to meteringPointId(s).
      operationId: createContracts
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ContractRequest"
      responses:
        "201":
          description: Successfully created contract
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update contracts
      description: Update a set of contracts.
      operationId: updateContracts
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ContractRequest"
      responses:
        "200":
          description: Successfully updated contract
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
  /contracts/{contractId}:
    get:
      summary: Get a single contract by ID
      description: Get a single contract identified by ID.
      operationId: getContractById
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved contract
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          description: Bad Request - When the request is invalid
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    ContractResponse:
      $ref: "./schemas/norgespris-contract-response.schema.json"
    ContractRequest:
      $ref: "./schemas/norgespris-contract-request.schema.json"
    Contract:
      $ref: "./schemas/norgespris-contract.schema.json#/definitions/contract"
    ContractAttributes:
      $ref: "./schemas/norgespris-contract-attributes.schema.json#/definitions/attributes"
    Meta:
      $ref: "./schemas/norgespris-contract-meta.schema.json#/definitions/meta"
    Error:
      $ref: "./schemas/json-api-error.schema.json"
    Relationships:
      $ref: "./schemas/norgespris-contract-relationships.schema.json#/definitions/relationships"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
